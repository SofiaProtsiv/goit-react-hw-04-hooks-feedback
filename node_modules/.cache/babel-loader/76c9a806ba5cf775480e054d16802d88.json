{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js\";\nimport React from 'react';\nimport style from './feedback.module.css';\nimport Statistics from './statistics';\nimport Controls from './controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class FeedbackApp extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.countTotalFeedback = () => {\n      const {\n        good,\n        neutral,\n        bad\n      } = this.state;\n      const total = good + neutral + bad;\n      return total;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const total = this.countTotalFeedback();\n      const {\n        good\n      } = this.state;\n      const percentage = good * 100 / total;\n      return Math.round(percentage);\n    };\n\n    this.countGoodFeedback = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n    };\n\n    this.countNeutralFeedback = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n    };\n\n    this.countBadFeedback = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1,\n        total: this.state.good + this.state.neutral + this.state.bad + 1\n      }));\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.feedback,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {\n        onGoodFeedback: this.countGoodFeedback,\n        onNeutralFeedback: this.countNeutralFeedback,\n        onBadFeedback: this.countBadFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: this.state.good,\n        neutral: this.state.neutral,\n        bad: this.state.bad,\n        total: this.state.total,\n        percentage: this.state.percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js"],"names":["React","style","Statistics","Controls","FeedbackApp","Component","state","good","neutral","bad","countTotalFeedback","total","countPositiveFeedbackPercentage","percentage","Math","round","countGoodFeedback","setState","prevState","countNeutralFeedback","countBadFeedback","render","positivePercentage","feedback"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAAyC;AAAA;AAAA;AAAA,SACtDC,KADsD,GAC9C;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KAD8C;;AAAA,SAOtDC,kBAPsD,GAOjC,MAAM;AAC3B,YAAM;AAAEH,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAAyB,KAAKH,KAApC;AACA,YAAMK,KAAK,GAAGJ,IAAI,GAAGC,OAAP,GAAiBC,GAA/B;AACA,aAAOE,KAAP;AACA,KAXsD;;AAAA,SAavDC,+BAbuD,GAarB,MAAM;AACvC,YAAMD,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,YAAM;AAAEH,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMO,UAAU,GAAIN,IAAI,GAAG,GAAR,GAAeI,KAAlC;AACA,aAAOG,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAP;AACA,KAlBsD;;AAAA,SAoBtDG,iBApBsD,GAoBlC,MAAM;AACxB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BX,QAAAA,IAAI,EAAEW,SAAS,CAACX,IAAV,GAAiB;AADG,OAAL,CAAvB;AAGD,KAxBqD;;AAAA,SAyBtDY,oBAzBsD,GAyB/B,MAAM;AAC3B,WAAKF,QAAL,CAAcC,SAAS,KAAK;AAC1BV,QAAAA,OAAO,EAAEU,SAAS,CAACV,OAAV,GAAoB;AADH,OAAL,CAAvB;AAGD,KA7BqD;;AAAA,SA8BtDY,gBA9BsD,GA8BnC,MAAM;AACvB,WAAKH,QAAL,CAAcC,SAAS,KAAK;AAC1BT,QAAAA,GAAG,EAAES,SAAS,CAACT,GAAV,GAAgB,CADK;AAE1BE,QAAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWE,OAA7B,GAAuC,KAAKF,KAAL,CAAWG,GAAlD,GAAwD;AAFrC,OAAL,CAAvB;AAID,KAnCqD;AAAA;;AAsCtDY,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEd,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAyB,KAAKH,KAApC;AACF,UAAMK,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,UAAMY,kBAAkB,GAAG,KAAKV,+BAAL,EAA3B;AAEE,wBACE;AAAK,MAAA,SAAS,EAAEX,KAAK,CAACsB,QAAtB;AAAA,8BACE,QAAC,QAAD;AACE,QAAA,cAAc,EAAE,KAAKP,iBADvB;AAEE,QAAA,iBAAiB,EAAE,KAAKG,oBAF1B;AAGE,QAAA,aAAa,EAAE,KAAKC;AAHtB;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,UAAD;AACE,QAAA,IAAI,EAAI,KAAKd,KAAL,CAAWC,IADrB;AAEE,QAAA,OAAO,EAAG,KAAKD,KAAL,CAAWE,OAFvB;AAGE,QAAA,GAAG,EAAG,KAAKF,KAAL,CAAWG,GAHnB;AAIE,QAAA,KAAK,EAAG,KAAKH,KAAL,CAAWK,KAJrB;AAKE,QAAA,UAAU,EAAG,KAAKL,KAAL,CAAWO;AAL1B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA3DqD","sourcesContent":["import React from 'react';\nimport style from './feedback.module.css';\nimport Statistics from './statistics'\nimport Controls from './controls'\n\nexport default class FeedbackApp extends React.Component{\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  countTotalFeedback = () => {\n\t\tconst { good, neutral, bad } = this.state;\n\t\tconst total = good + neutral + bad;\n\t\treturn total;\n\t};\n\n\tcountPositiveFeedbackPercentage = () => {\n\t\tconst total = this.countTotalFeedback();\n\t\tconst { good } = this.state;\n\t\tconst percentage = (good * 100) / total;\n\t\treturn Math.round(percentage);\n\t};\n\n  countGoodFeedback = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  }\n  countNeutralFeedback = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  }\n  countBadFeedback = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n      total: this.state.good + this.state.neutral + this.state.bad + 1,\n    }));\n  }\n  \n\n  render () {\n    const { good, neutral, bad } = this.state;\n\t\tconst total = this.countTotalFeedback();\n\t\tconst positivePercentage = this.countPositiveFeedbackPercentage();\n    \n    return (\n      <div className={style.feedback}>\n        <Controls \n          onGoodFeedback={this.countGoodFeedback}\n          onNeutralFeedback={this.countNeutralFeedback}\n          onBadFeedback={this.countBadFeedback}\n          />\n        <Statistics\n          good = {this.state.good}\n          neutral ={this.state.neutral}\n          bad ={this.state.bad}\n          total ={this.state.total}\n          percentage ={this.state.percentage}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}