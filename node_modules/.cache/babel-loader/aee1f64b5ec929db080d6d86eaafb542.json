{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js\";\nimport React from 'react';\nimport style from './feedback.module.css';\nimport Statistics from './statistics';\nimport Controls from './controls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class FeedbackApp extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.countTotalFeedback = () => {\n      const {\n        good,\n        neutral,\n        bad\n      } = this.state;\n      const total = good + neutral + bad;\n      return total;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const total = this.countTotalFeedback();\n      const {\n        good\n      } = this.state;\n      const percentage = good * 100 / total;\n      return Math.round(percentage);\n    };\n\n    this.onLeaveFeedback = event => {\n      const name = event.target.name;\n      this.setState(prevState => ({\n        [name]: prevState[name] + 1\n      }));\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.feedback,\n      children: [/*#__PURE__*/_jsxDEV(Controls, {\n        onGoodFeedback: this.countGoodFeedback,\n        onNeutralFeedback: this.countNeutralFeedback,\n        onBadFeedback: this.countBadFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n        good: this.state.good,\n        neutral: this.state.neutral,\n        bad: this.state.bad,\n        total: this.state.total,\n        percentage: this.state.percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js"],"names":["React","style","Statistics","Controls","FeedbackApp","Component","state","good","neutral","bad","countTotalFeedback","total","countPositiveFeedbackPercentage","percentage","Math","round","onLeaveFeedback","event","name","target","setState","prevState","render","positivePercentage","feedback","countGoodFeedback","countNeutralFeedback","countBadFeedback"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAAyC;AAAA;AAAA;AAAA,SACtDC,KADsD,GAC9C;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KAD8C;;AAAA,SAOtDC,kBAPsD,GAOjC,MAAM;AAC3B,YAAM;AAAEH,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAAyB,KAAKH,KAApC;AACA,YAAMK,KAAK,GAAGJ,IAAI,GAAGC,OAAP,GAAiBC,GAA/B;AACA,aAAOE,KAAP;AACA,KAXsD;;AAAA,SAavDC,+BAbuD,GAarB,MAAM;AACvC,YAAMD,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,YAAM;AAAEH,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACA,YAAMO,UAAU,GAAIN,IAAI,GAAG,GAAR,GAAeI,KAAlC;AACA,aAAOG,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAP;AACA,KAlBsD;;AAAA,SAoBvDG,eApBuD,GAoBpCC,KAAD,IAAW;AAC5B,YAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;AACA,WAAKE,QAAL,CAAeC,SAAD,KAAgB;AAC7B,SAACH,IAAD,GAAQG,SAAS,CAACH,IAAD,CAAT,GAAkB;AADG,OAAhB,CAAd;AAGA,KAzBsD;AAAA;;AA4BtDI,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEf,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAyB,KAAKH,KAApC;AACF,UAAMK,KAAK,GAAG,KAAKD,kBAAL,EAAd;AACA,UAAMa,kBAAkB,GAAG,KAAKX,+BAAL,EAA3B;AAEE,wBACE;AAAK,MAAA,SAAS,EAAEX,KAAK,CAACuB,QAAtB;AAAA,8BACE,QAAC,QAAD;AACE,QAAA,cAAc,EAAE,KAAKC,iBADvB;AAEE,QAAA,iBAAiB,EAAE,KAAKC,oBAF1B;AAGE,QAAA,aAAa,EAAE,KAAKC;AAHtB;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,UAAD;AACE,QAAA,IAAI,EAAI,KAAKrB,KAAL,CAAWC,IADrB;AAEE,QAAA,OAAO,EAAG,KAAKD,KAAL,CAAWE,OAFvB;AAGE,QAAA,GAAG,EAAG,KAAKF,KAAL,CAAWG,GAHnB;AAIE,QAAA,KAAK,EAAG,KAAKH,KAAL,CAAWK,KAJrB;AAKE,QAAA,UAAU,EAAG,KAAKL,KAAL,CAAWO;AAL1B;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAjDqD","sourcesContent":["import React from 'react';\nimport style from './feedback.module.css';\nimport Statistics from './statistics'\nimport Controls from './controls'\n\nexport default class FeedbackApp extends React.Component{\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  countTotalFeedback = () => {\n\t\tconst { good, neutral, bad } = this.state;\n\t\tconst total = good + neutral + bad;\n\t\treturn total;\n\t};\n\n\tcountPositiveFeedbackPercentage = () => {\n\t\tconst total = this.countTotalFeedback();\n\t\tconst { good } = this.state;\n\t\tconst percentage = (good * 100) / total;\n\t\treturn Math.round(percentage);\n\t};\n\n\tonLeaveFeedback = (event) => {\n\t\tconst name = event.target.name;\n\t\tthis.setState((prevState) => ({\n\t\t\t[name]: prevState[name] + 1\n\t\t}));\n\t};\n  \n\n  render () {\n    const { good, neutral, bad } = this.state;\n\t\tconst total = this.countTotalFeedback();\n\t\tconst positivePercentage = this.countPositiveFeedbackPercentage();\n    \n    return (\n      <div className={style.feedback}>\n        <Controls \n          onGoodFeedback={this.countGoodFeedback}\n          onNeutralFeedback={this.countNeutralFeedback}\n          onBadFeedback={this.countBadFeedback}\n          />\n        <Statistics\n          good = {this.state.good}\n          neutral ={this.state.neutral}\n          bad ={this.state.bad}\n          total ={this.state.total}\n          percentage ={this.state.percentage}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}