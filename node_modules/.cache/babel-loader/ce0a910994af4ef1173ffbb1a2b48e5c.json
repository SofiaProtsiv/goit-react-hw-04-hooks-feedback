{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FeedbackApp() {\n  _s();\n\n  const [good, setGood] = useState(\"\");\n  const [neutral, setNeutral] = useState(\"\");\n  const [bad, setBad] = useState(\"\");\n\n  const onLeaveFeedback = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log(event.target.name);\n\n    switch (name) {\n      case \"good\":\n        setGood(value);\n        break;\n\n      case \"neutral\":\n        setNeutral(value);\n        break;\n\n      case \"bad\":\n        setBad(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  console.log(bad.value);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.feedback,\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: style.button,\n      type: \"button\",\n      name: bad,\n      onClick: onLeaveFeedback,\n      children: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n} //   return (\n//     <div className={style.feedback}>\n//       <Section title=\"Please leave feedback\">\n//         <FeedbackOptions options={good, neutral, bad} onLeaveFeedback={onLeaveFeedback} />\n//       </Section>\n//       {total === 0 ? (\n//         <Notification message=\"No feedback given\" />\n//       ) : (\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//           />\n//         </Section>\n//       )}\n//     </div>\n//   );\n// }\n// export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n_s(FeedbackApp, \"tNtGm+KH3H5mcW5qQsx1uDHeFGs=\");\n\n_c = FeedbackApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackApp\");","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js"],"names":["useState","useEffect","Statistics","FeedbackOptions","Section","Notification","style","FeedbackApp","good","setGood","neutral","setNeutral","bad","setBad","onLeaveFeedback","event","name","value","target","console","log","feedback","button"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMc,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACG,MAAN,CAAaF,IAAzB;;AACA,YAAQA,IAAR;AACE,WAAK,MAAL;AACEP,QAAAA,OAAO,CAACQ,KAAD,CAAP;AACA;;AACF,WAAK,SAAL;AACEN,QAAAA,UAAU,CAACM,KAAD,CAAV;AACA;;AACF,WAAK,KAAL;AACEJ,QAAAA,MAAM,CAACI,KAAD,CAAN;AACA;;AACF;AACE;AAXJ;AAaD,GAhBD;;AAiBAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACK,KAAhB;AACA,sBACE;AAAK,IAAA,SAAS,EAAEX,KAAK,CAACe,QAAtB;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,SAAS,EAAEf,KAAK,CAACgB,MADnB;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,IAAI,EAAEV,GAHR;AAIE,MAAA,OAAO,EAAEE,eAJX;AAAA,gBAMGF;AANH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,C,CACD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GArHwBL,W;;KAAAA,W","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\n\nexport default function FeedbackApp() {\n  const [good, setGood] = useState(\"\");\n  const [neutral, setNeutral] = useState(\"\");\n  const [bad, setBad] = useState(\"\");\n\n  const onLeaveFeedback = (event) => {\n    const { name, value } = event.target;\n    console.log(event.target.name);\n    switch (name) {\n      case \"good\":\n        setGood(value);\n        break;\n      case \"neutral\":\n        setNeutral(value);\n        break;\n      case \"bad\":\n        setBad(value);\n        break;\n      default:\n        return;\n    }\n  };\n  console.log(bad.value);\n  return (\n    <div className={style.feedback}>\n      <Section title=\"Please leave feedback\"> </Section>\n      <button\n        className={style.button}\n        type=\"button\"\n        name={bad}\n        onClick={onLeaveFeedback}\n      >\n        {bad}\n      </button>\n    </div>\n  );\n}\n//   return (\n//     <div className={style.feedback}>\n//       <Section title=\"Please leave feedback\">\n//         <FeedbackOptions options={good, neutral, bad} onLeaveFeedback={onLeaveFeedback} />\n//       </Section>\n\n//       {total === 0 ? (\n//         <Notification message=\"No feedback given\" />\n//       ) : (\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//           />\n//         </Section>\n//       )}\n//     </div>\n//   );\n// }\n// export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}