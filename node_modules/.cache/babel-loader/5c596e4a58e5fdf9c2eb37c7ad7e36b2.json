{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FeedbackApp() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = option => {\n    switch (option) {\n      case \"good\":\n        setGood(prevGood => prevGood + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n\n      case \"bad\":\n        setBad(prevBad => prevBad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round(good / countTotalFeedback() * 100) || 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.feedback,\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: [\"good\", \"neutral\", \"bad\"],\n        onLeaveFeedback: onLeaveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: countTotalFeedback(),\n        positivePercentage: countPositiveFeedbackPercentage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n      message: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n} //   return (\n//     <div className={style.feedback}>\n//       <Section title=\"Please leave feedback\">\n//         <FeedbackOptions options={good, neutral, bad} onLeaveFeedback={onLeaveFeedback} />\n//       </Section>\n//       {total === 0 ? (\n//         <Notification message=\"No feedback given\" />\n//       ) : (\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//           />\n//         </Section>\n//       )}\n//     </div>\n//   );\n// }\n// export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n_s(FeedbackApp, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c = FeedbackApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackApp\");","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js"],"names":["useState","Statistics","FeedbackOptions","Section","Notification","style","FeedbackApp","good","setGood","neutral","setNeutral","bad","setBad","onLeaveFeedback","option","prevGood","prevNeutral","prevBad","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","feedback"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMa,eAAe,GAAIC,MAAD,IAAY;AAClC,YAAQA,MAAR;AACE,WAAK,MAAL;AACEN,QAAAA,OAAO,CAAEO,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAAP;AACA;;AACF,WAAK,SAAL;AACEL,QAAAA,UAAU,CAAEM,WAAD,IAAiBA,WAAW,GAAG,CAAhC,CAAV;AACA;;AACF,WAAK,KAAL;AACEJ,QAAAA,MAAM,CAAEK,OAAD,IAAaA,OAAO,GAAG,CAAxB,CAAN;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAeA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,WAAOX,IAAI,GAAGE,OAAP,GAAiBE,GAAxB;AACD,GAFD;;AAGA,QAAMQ,+BAA+B,GAAG,MAAM;AAC5C,WAAOC,IAAI,CAACC,KAAL,CAAYd,IAAI,GAAGW,kBAAkB,EAA1B,GAAgC,GAA3C,KAAmD,CAA1D;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEb,KAAK,CAACiB,QAAtB;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACE,QAAC,eAAD;AACE,QAAA,OAAO,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,KAApB,CADX;AAEE,QAAA,eAAe,EAAET;AAFnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,EAQGK,kBAAkB,kBACjB,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,IAAI,EAAEX,IADR;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,GAAG,EAAEE,GAHP;AAIE,QAAA,KAAK,EAAEO,kBAAkB,EAJ3B;AAKE,QAAA,kBAAkB,EAAEC,+BAA+B;AALrD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADiB,gBAWjB,QAAC,YAAD;AAAc,MAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,C,CACD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApIwBb,W;;KAAAA,W","sourcesContent":["import { useState } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\n\nexport default function FeedbackApp() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood((prevGood) => prevGood + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevNeutral) => prevNeutral + 1);\n        break;\n      case \"bad\":\n        setBad((prevBad) => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100) || 0;\n  };\n\n  return (\n    <div className={style.feedback}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      {countTotalFeedback() ? (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </div>\n  );\n}\n//   return (\n//     <div className={style.feedback}>\n//       <Section title=\"Please leave feedback\">\n//         <FeedbackOptions options={good, neutral, bad} onLeaveFeedback={onLeaveFeedback} />\n//       </Section>\n\n//       {total === 0 ? (\n//         <Notification message=\"No feedback given\" />\n//       ) : (\n//         <Section title=\"Statistics\">\n//           <Statistics\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positivePercentage}\n//           />\n//         </Section>\n//       )}\n//     </div>\n//   );\n// }\n// export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}