{"ast":null,"code":"var _jsxFileName = \"/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FeedbackApp() {\n  _s();\n\n  const [good, setGood] = useState(\"\");\n  const [neutral, setNeutral] = useState(\"\");\n  const [bad, setBad] = useState(\"\");\n\n  const onLeaveFeedback = event => {\n    switch (event.target.name) {\n      case \"good\":\n        setGood(event.target.value);\n        break;\n\n      case \"neutral\":\n        setNeutral(event.target.value);\n        break;\n\n      case \"bad\":\n        setBad(event.target.value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const positivePercentage = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.feedback,\n    children: [/*#__PURE__*/_jsxDEV(Section, {\n      title: \"Please leave feedback\",\n      children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n        options: (setGood, setNeutral, setBad),\n        onLeaveFeedback: onLeaveFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Section, {\n      title: \"Statistics\",\n      children: /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad // total={total}\n        ,\n        positivePercentage: positivePercentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n} // export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n_s(FeedbackApp, \"tNtGm+KH3H5mcW5qQsx1uDHeFGs=\");\n\n_c = FeedbackApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeedbackApp\");","map":{"version":3,"sources":["/Users/sofiaprotsiv/Documents/projects go it/goit-react-hw-02-feedback/src/components/feedback/feedback.js"],"names":["useState","useEffect","Statistics","FeedbackOptions","Section","Notification","style","FeedbackApp","good","setGood","neutral","setNeutral","bad","setBad","onLeaveFeedback","event","target","name","value","positivePercentage","feedback"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,EAAD,CAA9B;;AAEA,QAAMc,eAAe,GAAIC,KAAD,IAAW;AACjC,YAAQA,KAAK,CAACC,MAAN,CAAaC,IAArB;AACE,WAAK,MAAL;AACER,QAAAA,OAAO,CAACM,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAP;AACA;;AACF,WAAK,SAAL;AACEP,QAAAA,UAAU,CAACI,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAV;AACA;;AACF,WAAK,KAAL;AACEL,QAAAA,MAAM,CAACE,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAN;AACA;;AACF;AACE;AAXJ;AAaD,GAdD;;AAgBA,QAAMC,kBAAkB,GAAG,MAAM,CAAE,CAAnC;;AACA,sBACE;AAAK,IAAA,SAAS,EAAEb,KAAK,CAACc,QAAtB;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,uBAAf;AAAA,6BACE,QAAC,eAAD;AACE,QAAA,OAAO,GAAGX,OAAO,EAAEE,UAAF,EAAcE,MAAxB,CADT;AAEE,QAAA,eAAe,EAAEC;AAFnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,YAAf;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,IAAI,EAAEN,IADR;AAEE,QAAA,OAAO,EAAEE,OAFX;AAGE,QAAA,GAAG,EAAEE,GAHP,CAIE;AAJF;AAKE,QAAA,kBAAkB,EAAEO;AALtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,C,CACD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAzGwBZ,W;;KAAAA,W","sourcesContent":["import { useState, useEffect } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./Controls\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport style from \"./feedback.module.css\";\n\nexport default function FeedbackApp() {\n  const [good, setGood] = useState(\"\");\n  const [neutral, setNeutral] = useState(\"\");\n  const [bad, setBad] = useState(\"\");\n\n  const onLeaveFeedback = (event) => {\n    switch (event.target.name) {\n      case \"good\":\n        setGood(event.target.value);\n        break;\n      case \"neutral\":\n        setNeutral(event.target.value);\n        break;\n      case \"bad\":\n        setBad(event.target.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const positivePercentage = () => {};\n  return (\n    <div className={style.feedback}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={(setGood, setNeutral, setBad)}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      {/* {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : ( */}\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          // total={total}\n          positivePercentage={positivePercentage}\n        />\n      </Section>\n      {/* )} */}\n    </div>\n  );\n}\n// export default class FeedbackApp extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const percentage = (good * 100) / total;\n//     return Math.round(percentage);\n//   };\n\n//   onLeaveFeedback = (event) => {\n//     const name = event.target.name;\n//     this.setState((prevState) => ({\n//       [name]: prevState[name] + 1,\n//     }));\n//   };\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n\n//     const objKey = Object.keys(this.state);\n//     return (\n//       <div className={style.feedback}>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objKey}\n//             onLeaveFeedback={this.onLeaveFeedback}\n//           />\n//         </Section>\n\n//         {total === 0 ? (\n//           <Notification message=\"No feedback given\" />\n//         ) : (\n//           <Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage}\n//             />\n//           </Section>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}